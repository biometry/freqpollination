; Agent-based Model of bees foraging on a meadow with two co-flowering plant species competing for the shared pollinator

; Masterthesis of Helen Czioska
; Faculty of Environment & Natural Resources at the Albert-Ludwigs-University Freiburg


breed [bees bee]
bees-own [ 
  reward-memory   ;string - momory for the amount of reward gained from each of the last 4 visits
  species-memory  ;string - remembers the species of the last X flowers
  flower-memory   ;string - memory of the location of the last 4 visited floweres
  array           ;array - vision of the bee-agent on the grid
  choice          ;boolean - gives the currently prefferred flower (flower-constancy); changes with unsuccsessfull search and bad reward
  change-prob     ;float - propability to change the preferred flower type. Increases with low reward and unsuccsessfull search
  flowers-visited ;integer - counter how many flowers this bee-agent already visited
  flight-count    ;integer - duration of unsuccessfull search for the next preferred flower
  change-count1   ;integer - how often does this pollinator switch preferences due to bad reward?
  change-count2   ;integer - how often does this pollinator switch preferences due to  unsuccsessfull search?
  handling-time   ;integer - time the bee-agent needs to extract all reward (handling time = reward * 4 + 0.5 + penalty)
  change-penalty  ;integer - bee-agent needs additional 3seconds to extract all reward when unexperienced
  average-reward-count ; Integer - counter for foraging on flowers with average reward
  ]


patches-own [ 
  species       ;boolean - defined species, does not change
  reward        ;float - reward (max 1J), emptied with every visit by a bee-agent and restored by the reward-function
  visit-count   ;integer - counter how often this flower was visited
  pollination-count ;integer - counter for every successfull pollination
  ]


globals[
  flower-number  ;integer - how many flowers are on the meadow
  flower-number1 ;integer - how many flowers of species 1 are on the meadow
  flower-number2 ;integer - how many flowers of species 2 are on the meadow
  cluster-number1  ;integer - number of clusters of species 1
  cluster-number2  ;integer - number of clusters of species 2
]


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to setup
  clear-all
  
 ; create a meadow with patches of flowers of two pollinator-dependent flower species
 
 ask patches [set pcolor 64 set species 0] ;the grass
 
 ;create n patches with a average size of cluster-degree flowers
 set flower-number round ((flower-cover / 100) * (count patches))
 set flower-number1 round (flower-number * (frequency / 100))
 set flower-number2 round (flower-number - flower-number1)
 set cluster-number1 (flower-number1 / cluster-degree)
 set cluster-number2 (flower-number2 / cluster-degree)
 
 if(flower-number1 > 0) 
   [  ifelse (cluster-number1 >= 1) 
     [ask n-of cluster-number1 patches with [species = 0] [set species 1 set pcolor 47 set reward 1 ]]
     [ask n-of 1 patches with [pcolor = green] [set species 1 set pcolor 47 set reward 1 ]]
   ]
   
 if(flower-number2 > 0) 
  [
 ifelse (cluster-number2 >= 1)
    [ask n-of cluster-number2 patches with [species = 0] [set species 2 set pcolor 104 set reward 1 ]]
    [ask n-of 1 patches with [pcolor = green] [set species 2 set pcolor 104 set reward 1 ]]
  ]

 while [count patches with [species > 0] < flower-number ]
 [ask one-of patches with [species > 0] 
   [
    if (species = 1 and (count patches with [species = 1] < flower-number1))
      [ifelse (any? patches with [species = 1 and any? neighbors with [species = 0]])
        [if(any? neighbors with [species = 0])[ask one-of neighbors with [species = 0] [set species [species] of myself set pcolor [pcolor] of myself set reward 1 ]]]  
        [ask n-of 1 patches with [pcolor = green] [set species 1 set pcolor 47 set reward 1 ]]
      ]
   
   if (species = 2 and (count patches with [species = 2] < flower-number2))
      [ifelse (any? patches with [species = 2 and any? neighbors with [species = 0]])
        [if(any? neighbors with [species = 0]) [ask one-of neighbors with [species = 0] [set species [species] of myself set pcolor [pcolor] of myself set reward 1 ]]]
        [ask n-of 1 patches with [pcolor = green] [set species 2 set pcolor 104 set reward 1 ]] 
      ]
   ]
 ]
 
 
 
 ; create the bee-agents
 
  create-bees number-bees 
  [ ;set shape "bee" ;(Agents with an actual bee-shape)
    set shape "circle" set color 26 
    setxy random-xcor random-ycor 
    set reward-memory (list)
    set flower-memory (list)
    set species-memory (list)
    set flight-count 0
    set flowers-visited 0
    set handling-time 0
    set change-penalty 3
    let next-flower min-one-of patches with [species > 0 ][distance myself]
    face next-flower set choice [species] of next-flower 
    ;bee-agents choose the closest flower to their starting point for initial preference
    ]

  reset-ticks
  
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to move

     ifelse (flight-count < flightsteps-until-change)

              [
                ; find out if there are any flowers in the visible area of the bee which have the preferres species AND were not visited before
                set array patches in-cone view 180 with [(species = [choice] of myself) and (not member? self [flower-memory] of myself) ] 
                let next-flower min-one-of array [distance myself]
                ifelse any? array 
                    [ face next-flower fd 1] ;face the nearest flower and move to it in a straight line (see Viswanathan 2008)
                    [ rt random-normal 0 stdev-angle fd 1 set flight-count flight-count + 1 ]
              ]
   
   
              [
                set change-prob change-prob + 0.1 ; every second the bee-agent does not find a preferred flower, the change-probability increases by 10% (see Chittke et al. 1997)
                ifelse (random-float 1 < change-prob) ; if the random-number is below the change-prob, the bee-agent just picks the next available flower regardless of its species
                [  
                  set array patches in-cone view 180 with [ (species > 0) and (not member? self [flower-memory] of myself) ] 
                  let next-flower min-one-of array [distance myself]
                  ifelse any? array
                    [ face next-flower fd 1 set choice [species] of next-flower set change-count2 change-count2 + 1 set change-prob 0]
                    [ rt random-normal 0 stdev-angle fd 1 set flight-count flight-count + 1 ]
                ]
                [ rt random-normal 0 stdev-angle fd 1 set flight-count flight-count + 1 ]
              ]
  
end           
           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to visit

   if (length (reward-memory) > 0) ; precaution for the first visit
   [
      if (reward < (mean reward-memory) / 2) [set change-prob change-prob + 0.1 set average-reward-count 0] ;bad reward: change-porpability increases
      if (reward > (mean reward-memory) * 2) [set change-prob 0 set average-reward-count 0] ;very good reward: change-porpability decreases
      if ((reward < (mean reward-memory) * 2) and (reward > (mean reward-memory) / 2)) [ set average-reward-count average-reward-count + 1]
      if (average-reward-count > 5) [set change-prob 0 set average-reward-count 0] ; 5 times average reward: change-porpability decreases
      
      ifelse (choice = 1)
           [ if (random-float 1 < change-prob) [set choice 2 set change-prob 0 set change-count1 change-count1 + 1 set average-reward-count 0]]
           [ if (random-float 1 < change-prob) [set choice 1 set change-prob 0 set change-count1 change-count1 + 1 set average-reward-count 0]]
   ]
   
   ;remember reward
   while [(length reward-memory ) >= 4] [ set reward-memory  (but-last reward-memory ) ]
   set reward-memory  (fput [reward] of patch-here reward-memory  )
   
   ;remember flower-location
      ; Every pollinator has a memory for visited flowers. Pollinators avoid recently visited flowers (see Goulson1999 for review)
      ; Goulson 2000: "Pollinators can remember the location of the last 4 visited flowers"
   while [(length flower-memory) >= 4] [ set flower-memory (but-last flower-memory) ]
   set flower-memory (fput patch-here flower-memory )
   
   
   ;calculate handling-time
      ; 4 s/J (Roubik 1989 in Kunin & Iwasa 1996)
      ; 0.5s constant minimum handling time (see K&I 1996)
      ; 3s Penalty for change of flower, "experience extract time" (see K&I 1996)
      
   if (length (species-memory) > 0) 
   [ifelse (first species-memory = [species] of patch-here) 
     [set change-penalty 0]
     [set change-penalty 3]
   ]
   set handling-time (round (reward * 4 + 0.5 + change-penalty))
          
   if ( member? ([species] of patch-here) species-memory)
   [set pollination-count pollination-count + 1]
   
   while [(length species-memory) >= pollen-reach] [ set species-memory (but-last species-memory) ]
   set species-memory (fput [species] of patch-here species-memory )
   
   set flight-count 0  
   set flowers-visited flowers-visited + 1
   set reward 0                                 
   set visit-count visit-count + 1
   
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to stay
  
set handling-time handling-time - 1

end  


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to go
ask bees [
      ifelse (handling-time > 0) 
           [stay]           
           [ifelse (([choice] of self = species) and (not member? patch-here [flower-memory] of self)) 
             [visit]    
             [move]  
           ]    
]

ask patches [if (reward < 1) [set reward reward + reward-function]] ; see Kunin & Iwasa 1996: Max. 1 J

tick

end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to-report visits [spec]
report (sum [visit-count] of patches with [species = spec])
end

to-report pollination-success [spec]
report (sum [pollination-count] of patches with [species = spec])
end

to-report reward-report [spec]
report ( mean [reward] of patches with [species = spec])
end

to-report count-change-flightsteps
report sum [change-count2] of bees
end

to-report count-change-reward
report sum [change-count1] of bees
end

to-report number-flowers [spec]
report count patches with [species = spec]
end